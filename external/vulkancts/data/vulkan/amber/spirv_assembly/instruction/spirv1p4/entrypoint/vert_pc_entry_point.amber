[require]
VK_KHR_spirv_1_4

[vertex shader spirv]
; Test a vertex shader with a push constant on the OpEntryPoint.
;
; #version 450
;
; layout(push_constant) uniform pushConstants {
;     vec2 in_val[4];
; } u_pushConstants;
;
; void main() {
;	gl_Position = vec4(u_pushConstants.in_val[gl_VertexIndex], 0.0, 1.0);
; }
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Vertex %main "main" %_ %u_pushConstants %gl_VertexIndex
               OpSource GLSL 450
               OpName %main "main"
               OpName %gl_PerVertex "gl_PerVertex"
               OpMemberName %gl_PerVertex 0 "gl_Position"
               OpMemberName %gl_PerVertex 1 "gl_PointSize"
               OpMemberName %gl_PerVertex 2 "gl_ClipDistance"
               OpMemberName %gl_PerVertex 3 "gl_CullDistance"
               OpName %_ ""
               OpName %pushConstants "pushConstants"
               OpMemberName %pushConstants 0 "in_val"
               OpName %u_pushConstants "u_pushConstants"
               OpName %gl_VertexIndex "gl_VertexIndex"
               OpMemberDecorate %gl_PerVertex 0 BuiltIn Position
               OpMemberDecorate %gl_PerVertex 1 BuiltIn PointSize
               OpMemberDecorate %gl_PerVertex 2 BuiltIn ClipDistance
               OpMemberDecorate %gl_PerVertex 3 BuiltIn CullDistance
               OpDecorate %gl_PerVertex Block
               OpDecorate %_arr_v2float_uint_4 ArrayStride 8
               OpMemberDecorate %pushConstants 0 Offset 0
               OpDecorate %pushConstants Block
               OpDecorate %gl_VertexIndex BuiltIn VertexIndex
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
      %float = OpTypeFloat 32
    %v4float = OpTypeVector %float 4
       %uint = OpTypeInt 32 0
     %uint_1 = OpConstant %uint 1
%_arr_float_uint_1 = OpTypeArray %float %uint_1
%gl_PerVertex = OpTypeStruct %v4float %float %_arr_float_uint_1 %_arr_float_uint_1
%_ptr_Output_gl_PerVertex = OpTypePointer Output %gl_PerVertex
          %_ = OpVariable %_ptr_Output_gl_PerVertex Output
        %int = OpTypeInt 32 1
      %int_0 = OpConstant %int 0
    %v2float = OpTypeVector %float 2
     %uint_4 = OpConstant %uint 4
%_arr_v2float_uint_4 = OpTypeArray %v2float %uint_4
%pushConstants = OpTypeStruct %_arr_v2float_uint_4
%_ptr_PushConstant_pushConstants = OpTypePointer PushConstant %pushConstants
%u_pushConstants = OpVariable %_ptr_PushConstant_pushConstants PushConstant
%_ptr_Input_int = OpTypePointer Input %int
%gl_VertexIndex = OpVariable %_ptr_Input_int Input
%_ptr_PushConstant_v2float = OpTypePointer PushConstant %v2float
    %float_0 = OpConstant %float 0
    %float_1 = OpConstant %float 1
%_ptr_Output_v4float = OpTypePointer Output %v4float
       %main = OpFunction %void None %3
          %5 = OpLabel
         %24 = OpLoad %int %gl_VertexIndex
         %26 = OpAccessChain %_ptr_PushConstant_v2float %u_pushConstants %int_0 %24
         %27 = OpLoad %v2float %26
         %30 = OpCompositeExtract %float %27 0
         %31 = OpCompositeExtract %float %27 1
         %32 = OpCompositeConstruct %v4float %30 %31 %float_0 %float_1
         %34 = OpAccessChain %_ptr_Output_v4float %_ %int_0
               OpStore %34 %32
               OpReturn
               OpFunctionEnd
[fragment shader]
#version 430
layout(location = 0) out vec4 outColor;
void main() {
    outColor = vec4(0.5, 0.5, 0.5, 0.5);
}

[test]
clear
# Draw over bottom left quadrant
uniform float 0 -1.0 -1.0 0.0 -1.0 -1.0 0.0 0.0 0.0
draw rect -1 -1 2 2

probe rect rgba (0, 0, 125, 125) (0.5 0.5 0.5 0.5)
probe rect rgba (125, 125, 125, 125) (0.0 0.0 0.0 0.0)

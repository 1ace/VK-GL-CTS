/* WARNING: This is auto-generated file. Do not modify, since changes will
 * be lost! Modify the generating script instead.
 * This file was generated by /scripts/gen_framework.py
 */

VkPhysicalDevice4444FormatsFeaturesEXT							device4444FormatsFeaturesEXT[count];
VkPhysicalDevice8BitStorageFeatures								device8BitStorageFeatures[count];
VkPhysicalDevice16BitStorageFeatures							device16BitStorageFeatures[count];
VkPhysicalDeviceASTCDecodeFeaturesEXT							deviceASTCDecodeFeaturesEXT[count];
VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT				deviceBlendOperationAdvancedFeaturesEXT[count];
VkPhysicalDeviceBufferDeviceAddressFeatures						deviceBufferDeviceAddressFeatures[count];
VkPhysicalDeviceCustomBorderColorFeaturesEXT					deviceCustomBorderColorFeaturesEXT[count];
VkPhysicalDeviceColorWriteEnableFeaturesEXT						deviceColorWriteEnableFeaturesEXT[count];
VkPhysicalDeviceDescriptorIndexingFeatures						deviceDescriptorIndexingFeatures[count];
VkPhysicalDeviceDepthClipEnableFeaturesEXT						deviceDepthClipEnableFeaturesEXT[count];
VkPhysicalDeviceExtendedDynamicStateFeaturesEXT					deviceExtendedDynamicStateFeaturesEXT[count];
VkPhysicalDeviceExtendedDynamicState2FeaturesEXT				deviceExtendedDynamicState2FeaturesEXT[count];
VkPhysicalDeviceFragmentShadingRateFeaturesKHR					deviceFragmentShadingRateFeaturesKHR[count];
VkPhysicalDeviceIndexTypeUint8FeaturesEXT						deviceIndexTypeUint8FeaturesEXT[count];
VkPhysicalDeviceImagelessFramebufferFeatures					deviceImagelessFramebufferFeatures[count];
VkPhysicalDeviceHostQueryResetFeatures							deviceHostQueryResetFeatures[count];
VkPhysicalDeviceLineRasterizationFeaturesEXT					deviceLineRasterizationFeaturesEXT[count];
VkPhysicalDeviceMultiviewFeatures								deviceMultiviewFeatures[count];
VkPhysicalDevicePerformanceQueryFeaturesKHR						devicePerformanceQueryFeaturesKHR[count];
VkPhysicalDeviceProtectedMemoryFeatures							deviceProtectedMemoryFeatures[count];
VkPhysicalDeviceRobustness2FeaturesEXT							deviceRobustness2FeaturesEXT[count];
VkPhysicalDeviceSamplerYcbcrConversionFeatures					deviceSamplerYcbcrConversionFeatures[count];
VkPhysicalDeviceScalarBlockLayoutFeatures						deviceScalarBlockLayoutFeatures[count];
VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures				deviceSeparateDepthStencilLayoutsFeatures[count];
VkPhysicalDeviceShaderAtomicInt64Features						deviceShaderAtomicInt64Features[count];
VkPhysicalDeviceShaderAtomicFloatFeaturesEXT					deviceShaderAtomicFloatFeaturesEXT[count];
VkPhysicalDeviceShaderFloat16Int8Features						deviceShaderFloat16Int8Features[count];
VkPhysicalDeviceShaderClockFeaturesKHR							deviceShaderClockFeaturesKHR[count];
VkPhysicalDeviceShaderDrawParametersFeatures					deviceShaderDrawParametersFeatures[count];
VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures				deviceShaderSubgroupExtendedTypesFeatures[count];
VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT				deviceFragmentShaderInterlockFeaturesEXT[count];
VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT					deviceTexelBufferAlignmentFeaturesEXT[count];
VkPhysicalDeviceTimelineSemaphoreFeatures						deviceTimelineSemaphoreFeatures[count];
VkPhysicalDeviceUniformBufferStandardLayoutFeatures				deviceUniformBufferStandardLayoutFeatures[count];
VkPhysicalDeviceVariablePointersFeatures						deviceVariablePointersFeatures[count];
VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT				deviceVertexAttributeDivisorFeaturesEXT[count];
VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT				deviceVertexInputDynamicStateFeaturesEXT[count];
VkPhysicalDeviceYcbcrImageArraysFeaturesEXT						deviceYcbcrImageArraysFeaturesEXT[count];
VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT				deviceYcbcr2Plane444FormatsFeaturesEXT[count];

const bool is4444FormatsFeaturesEXT						= checkExtension(properties, "VK_EXT_4444_formats")							|| context.contextSupports(vk::ApiVersion(0, 1, 3, 0));
const bool is8BitStorageFeatures						=																			   context.contextSupports(vk::ApiVersion(0, 1, 2, 0));
const bool is16BitStorageFeatures						=																			   context.contextSupports(vk::ApiVersion(0, 1, 1, 0));
const bool isASTCDecodeFeaturesEXT						= checkExtension(properties, "VK_EXT_astc_decode_mode");
const bool isBlendOperationAdvancedFeaturesEXT			= checkExtension(properties, "VK_EXT_blend_operation_advanced");
const bool isBufferDeviceAddressFeatures				=																			   context.contextSupports(vk::ApiVersion(0, 1, 2, 0));
const bool isCustomBorderColorFeaturesEXT				= checkExtension(properties, "VK_EXT_custom_border_color");
const bool isColorWriteEnableFeaturesEXT				= checkExtension(properties, "VK_EXT_color_write_enable");
const bool isDescriptorIndexingFeatures					=																			   context.contextSupports(vk::ApiVersion(0, 1, 2, 0));
const bool isDepthClipEnableFeaturesEXT					= checkExtension(properties, "VK_EXT_depth_clip_enable");
const bool isExtendedDynamicStateFeaturesEXT			= checkExtension(properties, "VK_EXT_extended_dynamic_state")				|| context.contextSupports(vk::ApiVersion(0, 1, 3, 0));
const bool isExtendedDynamicState2FeaturesEXT			= checkExtension(properties, "VK_EXT_extended_dynamic_state2");
const bool isFragmentShadingRateFeaturesKHR				= checkExtension(properties, "VK_KHR_fragment_shading_rate");
const bool isIndexTypeUint8FeaturesEXT					= checkExtension(properties, "VK_EXT_index_type_uint8");
const bool isImagelessFramebufferFeatures				=																			   context.contextSupports(vk::ApiVersion(0, 1, 2, 0));
const bool isHostQueryResetFeatures						=																			   context.contextSupports(vk::ApiVersion(0, 1, 2, 0));
const bool isLineRasterizationFeaturesEXT				= checkExtension(properties, "VK_EXT_line_rasterization");
const bool isMultiviewFeatures							=																			   context.contextSupports(vk::ApiVersion(0, 1, 1, 0));
const bool isPerformanceQueryFeaturesKHR				= checkExtension(properties, "VK_KHR_performance_query");
const bool isProtectedMemoryFeatures					=																			   context.contextSupports(vk::ApiVersion(0, 1, 1, 0));
const bool isRobustness2FeaturesEXT						= checkExtension(properties, "VK_EXT_robustness2");
const bool isSamplerYcbcrConversionFeatures				=																			   context.contextSupports(vk::ApiVersion(0, 1, 1, 0));
const bool isScalarBlockLayoutFeatures					=																			   context.contextSupports(vk::ApiVersion(0, 1, 2, 0));
const bool isSeparateDepthStencilLayoutsFeatures		=																			   context.contextSupports(vk::ApiVersion(0, 1, 2, 0));
const bool isShaderAtomicInt64Features					=																			   context.contextSupports(vk::ApiVersion(0, 1, 2, 0));
const bool isShaderAtomicFloatFeaturesEXT				= checkExtension(properties, "VK_EXT_shader_atomic_float");
const bool isShaderFloat16Int8Features					=																			   context.contextSupports(vk::ApiVersion(0, 1, 2, 0));
const bool isShaderClockFeaturesKHR						= checkExtension(properties, "VK_KHR_shader_clock");
const bool isShaderDrawParametersFeatures				=																			   context.contextSupports(vk::ApiVersion(0, 1, 1, 0));
const bool isShaderSubgroupExtendedTypesFeatures		=																			   context.contextSupports(vk::ApiVersion(0, 1, 2, 0));
const bool isFragmentShaderInterlockFeaturesEXT			= checkExtension(properties, "VK_EXT_fragment_shader_interlock");
const bool isTexelBufferAlignmentFeaturesEXT			= checkExtension(properties, "VK_EXT_texel_buffer_alignment")				|| context.contextSupports(vk::ApiVersion(0, 1, 3, 0));
const bool isTimelineSemaphoreFeatures					=																			   context.contextSupports(vk::ApiVersion(0, 1, 2, 0));
const bool isUniformBufferStandardLayoutFeatures		=																			   context.contextSupports(vk::ApiVersion(0, 1, 2, 0));
const bool isVariablePointersFeatures					=																			   context.contextSupports(vk::ApiVersion(0, 1, 1, 0));
const bool isVertexAttributeDivisorFeaturesEXT			= checkExtension(properties, "VK_EXT_vertex_attribute_divisor");
const bool isVertexInputDynamicStateFeaturesEXT			= checkExtension(properties, "VK_EXT_vertex_input_dynamic_state");
const bool isYcbcrImageArraysFeaturesEXT				= checkExtension(properties, "VK_EXT_ycbcr_image_arrays");
const bool isYcbcr2Plane444FormatsFeaturesEXT			= checkExtension(properties, "VK_EXT_ycbcr_2plane_444_formats");

for (int ndx = 0; ndx < count; ++ndx)
{
	deMemset(&device4444FormatsFeaturesEXT[ndx],					0xFF * ndx, sizeof(VkPhysicalDevice4444FormatsFeaturesEXT));
	deMemset(&device8BitStorageFeatures[ndx],						0xFF * ndx, sizeof(VkPhysicalDevice8BitStorageFeatures));
	deMemset(&device16BitStorageFeatures[ndx],						0xFF * ndx, sizeof(VkPhysicalDevice16BitStorageFeatures));
	deMemset(&deviceASTCDecodeFeaturesEXT[ndx],						0xFF * ndx, sizeof(VkPhysicalDeviceASTCDecodeFeaturesEXT));
	deMemset(&deviceBlendOperationAdvancedFeaturesEXT[ndx],			0xFF * ndx, sizeof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT));
	deMemset(&deviceBufferDeviceAddressFeatures[ndx],				0xFF * ndx, sizeof(VkPhysicalDeviceBufferDeviceAddressFeatures));
	deMemset(&deviceCustomBorderColorFeaturesEXT[ndx],				0xFF * ndx, sizeof(VkPhysicalDeviceCustomBorderColorFeaturesEXT));
	deMemset(&deviceColorWriteEnableFeaturesEXT[ndx],				0xFF * ndx, sizeof(VkPhysicalDeviceColorWriteEnableFeaturesEXT));
	deMemset(&deviceDescriptorIndexingFeatures[ndx],				0xFF * ndx, sizeof(VkPhysicalDeviceDescriptorIndexingFeatures));
	deMemset(&deviceDepthClipEnableFeaturesEXT[ndx],				0xFF * ndx, sizeof(VkPhysicalDeviceDepthClipEnableFeaturesEXT));
	deMemset(&deviceExtendedDynamicStateFeaturesEXT[ndx],			0xFF * ndx, sizeof(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT));
	deMemset(&deviceExtendedDynamicState2FeaturesEXT[ndx],			0xFF * ndx, sizeof(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT));
	deMemset(&deviceFragmentShadingRateFeaturesKHR[ndx],			0xFF * ndx, sizeof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR));
	deMemset(&deviceIndexTypeUint8FeaturesEXT[ndx],					0xFF * ndx, sizeof(VkPhysicalDeviceIndexTypeUint8FeaturesEXT));
	deMemset(&deviceImagelessFramebufferFeatures[ndx],				0xFF * ndx, sizeof(VkPhysicalDeviceImagelessFramebufferFeatures));
	deMemset(&deviceHostQueryResetFeatures[ndx],					0xFF * ndx, sizeof(VkPhysicalDeviceHostQueryResetFeatures));
	deMemset(&deviceLineRasterizationFeaturesEXT[ndx],				0xFF * ndx, sizeof(VkPhysicalDeviceLineRasterizationFeaturesEXT));
	deMemset(&deviceMultiviewFeatures[ndx],							0xFF * ndx, sizeof(VkPhysicalDeviceMultiviewFeatures));
	deMemset(&devicePerformanceQueryFeaturesKHR[ndx],				0xFF * ndx, sizeof(VkPhysicalDevicePerformanceQueryFeaturesKHR));
	deMemset(&deviceProtectedMemoryFeatures[ndx],					0xFF * ndx, sizeof(VkPhysicalDeviceProtectedMemoryFeatures));
	deMemset(&deviceRobustness2FeaturesEXT[ndx],					0xFF * ndx, sizeof(VkPhysicalDeviceRobustness2FeaturesEXT));
	deMemset(&deviceSamplerYcbcrConversionFeatures[ndx],			0xFF * ndx, sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeatures));
	deMemset(&deviceScalarBlockLayoutFeatures[ndx],					0xFF * ndx, sizeof(VkPhysicalDeviceScalarBlockLayoutFeatures));
	deMemset(&deviceSeparateDepthStencilLayoutsFeatures[ndx],		0xFF * ndx, sizeof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures));
	deMemset(&deviceShaderAtomicInt64Features[ndx],					0xFF * ndx, sizeof(VkPhysicalDeviceShaderAtomicInt64Features));
	deMemset(&deviceShaderAtomicFloatFeaturesEXT[ndx],				0xFF * ndx, sizeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT));
	deMemset(&deviceShaderFloat16Int8Features[ndx],					0xFF * ndx, sizeof(VkPhysicalDeviceShaderFloat16Int8Features));
	deMemset(&deviceShaderClockFeaturesKHR[ndx],					0xFF * ndx, sizeof(VkPhysicalDeviceShaderClockFeaturesKHR));
	deMemset(&deviceShaderDrawParametersFeatures[ndx],				0xFF * ndx, sizeof(VkPhysicalDeviceShaderDrawParametersFeatures));
	deMemset(&deviceShaderSubgroupExtendedTypesFeatures[ndx],		0xFF * ndx, sizeof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures));
	deMemset(&deviceFragmentShaderInterlockFeaturesEXT[ndx],		0xFF * ndx, sizeof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT));
	deMemset(&deviceTexelBufferAlignmentFeaturesEXT[ndx],			0xFF * ndx, sizeof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT));
	deMemset(&deviceTimelineSemaphoreFeatures[ndx],					0xFF * ndx, sizeof(VkPhysicalDeviceTimelineSemaphoreFeatures));
	deMemset(&deviceUniformBufferStandardLayoutFeatures[ndx],		0xFF * ndx, sizeof(VkPhysicalDeviceUniformBufferStandardLayoutFeatures));
	deMemset(&deviceVariablePointersFeatures[ndx],					0xFF * ndx, sizeof(VkPhysicalDeviceVariablePointersFeatures));
	deMemset(&deviceVertexAttributeDivisorFeaturesEXT[ndx],			0xFF * ndx, sizeof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT));
	deMemset(&deviceVertexInputDynamicStateFeaturesEXT[ndx],		0xFF * ndx, sizeof(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT));
	deMemset(&deviceYcbcrImageArraysFeaturesEXT[ndx],				0xFF * ndx, sizeof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT));
	deMemset(&deviceYcbcr2Plane444FormatsFeaturesEXT[ndx],			0xFF * ndx, sizeof(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT));

	device4444FormatsFeaturesEXT[ndx].sType = is4444FormatsFeaturesEXT ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT : VK_STRUCTURE_TYPE_MAX_ENUM;
	device4444FormatsFeaturesEXT[ndx].pNext = &device8BitStorageFeatures[ndx];

	device8BitStorageFeatures[ndx].sType = is8BitStorageFeatures ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES : VK_STRUCTURE_TYPE_MAX_ENUM;
	device8BitStorageFeatures[ndx].pNext = &device16BitStorageFeatures[ndx];

	device16BitStorageFeatures[ndx].sType = is16BitStorageFeatures ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES : VK_STRUCTURE_TYPE_MAX_ENUM;
	device16BitStorageFeatures[ndx].pNext = &deviceASTCDecodeFeaturesEXT[ndx];

	deviceASTCDecodeFeaturesEXT[ndx].sType = isASTCDecodeFeaturesEXT ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceASTCDecodeFeaturesEXT[ndx].pNext = &deviceBlendOperationAdvancedFeaturesEXT[ndx];

	deviceBlendOperationAdvancedFeaturesEXT[ndx].sType = isBlendOperationAdvancedFeaturesEXT ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceBlendOperationAdvancedFeaturesEXT[ndx].pNext = &deviceBufferDeviceAddressFeatures[ndx];

	deviceBufferDeviceAddressFeatures[ndx].sType = isBufferDeviceAddressFeatures ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceBufferDeviceAddressFeatures[ndx].pNext = &deviceCustomBorderColorFeaturesEXT[ndx];

	deviceCustomBorderColorFeaturesEXT[ndx].sType = isCustomBorderColorFeaturesEXT ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceCustomBorderColorFeaturesEXT[ndx].pNext = &deviceColorWriteEnableFeaturesEXT[ndx];

	deviceColorWriteEnableFeaturesEXT[ndx].sType = isColorWriteEnableFeaturesEXT ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceColorWriteEnableFeaturesEXT[ndx].pNext = &deviceDescriptorIndexingFeatures[ndx];

	deviceDescriptorIndexingFeatures[ndx].sType = isDescriptorIndexingFeatures ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceDescriptorIndexingFeatures[ndx].pNext = &deviceDepthClipEnableFeaturesEXT[ndx];

	deviceDepthClipEnableFeaturesEXT[ndx].sType = isDepthClipEnableFeaturesEXT ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceDepthClipEnableFeaturesEXT[ndx].pNext = &deviceExtendedDynamicStateFeaturesEXT[ndx];

	deviceExtendedDynamicStateFeaturesEXT[ndx].sType = isExtendedDynamicStateFeaturesEXT ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceExtendedDynamicStateFeaturesEXT[ndx].pNext = &deviceExtendedDynamicState2FeaturesEXT[ndx];

	deviceExtendedDynamicState2FeaturesEXT[ndx].sType = isExtendedDynamicState2FeaturesEXT ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceExtendedDynamicState2FeaturesEXT[ndx].pNext = &deviceFragmentShadingRateFeaturesKHR[ndx];

	deviceFragmentShadingRateFeaturesKHR[ndx].sType = isFragmentShadingRateFeaturesKHR ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceFragmentShadingRateFeaturesKHR[ndx].pNext = &deviceIndexTypeUint8FeaturesEXT[ndx];

	deviceIndexTypeUint8FeaturesEXT[ndx].sType = isIndexTypeUint8FeaturesEXT ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceIndexTypeUint8FeaturesEXT[ndx].pNext = &deviceImagelessFramebufferFeatures[ndx];

	deviceImagelessFramebufferFeatures[ndx].sType = isImagelessFramebufferFeatures ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceImagelessFramebufferFeatures[ndx].pNext = &deviceHostQueryResetFeatures[ndx];

	deviceHostQueryResetFeatures[ndx].sType = isHostQueryResetFeatures ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceHostQueryResetFeatures[ndx].pNext = &deviceLineRasterizationFeaturesEXT[ndx];

	deviceLineRasterizationFeaturesEXT[ndx].sType = isLineRasterizationFeaturesEXT ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceLineRasterizationFeaturesEXT[ndx].pNext = &deviceMultiviewFeatures[ndx];

	deviceMultiviewFeatures[ndx].sType = isMultiviewFeatures ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceMultiviewFeatures[ndx].pNext = &devicePerformanceQueryFeaturesKHR[ndx];

	devicePerformanceQueryFeaturesKHR[ndx].sType = isPerformanceQueryFeaturesKHR ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR : VK_STRUCTURE_TYPE_MAX_ENUM;
	devicePerformanceQueryFeaturesKHR[ndx].pNext = &deviceProtectedMemoryFeatures[ndx];

	deviceProtectedMemoryFeatures[ndx].sType = isProtectedMemoryFeatures ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceProtectedMemoryFeatures[ndx].pNext = &deviceRobustness2FeaturesEXT[ndx];

	deviceRobustness2FeaturesEXT[ndx].sType = isRobustness2FeaturesEXT ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceRobustness2FeaturesEXT[ndx].pNext = &deviceSamplerYcbcrConversionFeatures[ndx];

	deviceSamplerYcbcrConversionFeatures[ndx].sType = isSamplerYcbcrConversionFeatures ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceSamplerYcbcrConversionFeatures[ndx].pNext = &deviceScalarBlockLayoutFeatures[ndx];

	deviceScalarBlockLayoutFeatures[ndx].sType = isScalarBlockLayoutFeatures ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceScalarBlockLayoutFeatures[ndx].pNext = &deviceSeparateDepthStencilLayoutsFeatures[ndx];

	deviceSeparateDepthStencilLayoutsFeatures[ndx].sType = isSeparateDepthStencilLayoutsFeatures ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceSeparateDepthStencilLayoutsFeatures[ndx].pNext = &deviceShaderAtomicInt64Features[ndx];

	deviceShaderAtomicInt64Features[ndx].sType = isShaderAtomicInt64Features ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceShaderAtomicInt64Features[ndx].pNext = &deviceShaderAtomicFloatFeaturesEXT[ndx];

	deviceShaderAtomicFloatFeaturesEXT[ndx].sType = isShaderAtomicFloatFeaturesEXT ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceShaderAtomicFloatFeaturesEXT[ndx].pNext = &deviceShaderFloat16Int8Features[ndx];

	deviceShaderFloat16Int8Features[ndx].sType = isShaderFloat16Int8Features ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceShaderFloat16Int8Features[ndx].pNext = &deviceShaderClockFeaturesKHR[ndx];

	deviceShaderClockFeaturesKHR[ndx].sType = isShaderClockFeaturesKHR ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceShaderClockFeaturesKHR[ndx].pNext = &deviceShaderDrawParametersFeatures[ndx];

	deviceShaderDrawParametersFeatures[ndx].sType = isShaderDrawParametersFeatures ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceShaderDrawParametersFeatures[ndx].pNext = &deviceShaderSubgroupExtendedTypesFeatures[ndx];

	deviceShaderSubgroupExtendedTypesFeatures[ndx].sType = isShaderSubgroupExtendedTypesFeatures ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceShaderSubgroupExtendedTypesFeatures[ndx].pNext = &deviceFragmentShaderInterlockFeaturesEXT[ndx];

	deviceFragmentShaderInterlockFeaturesEXT[ndx].sType = isFragmentShaderInterlockFeaturesEXT ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceFragmentShaderInterlockFeaturesEXT[ndx].pNext = &deviceTexelBufferAlignmentFeaturesEXT[ndx];

	deviceTexelBufferAlignmentFeaturesEXT[ndx].sType = isTexelBufferAlignmentFeaturesEXT ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceTexelBufferAlignmentFeaturesEXT[ndx].pNext = &deviceTimelineSemaphoreFeatures[ndx];

	deviceTimelineSemaphoreFeatures[ndx].sType = isTimelineSemaphoreFeatures ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceTimelineSemaphoreFeatures[ndx].pNext = &deviceUniformBufferStandardLayoutFeatures[ndx];

	deviceUniformBufferStandardLayoutFeatures[ndx].sType = isUniformBufferStandardLayoutFeatures ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceUniformBufferStandardLayoutFeatures[ndx].pNext = &deviceVariablePointersFeatures[ndx];

	deviceVariablePointersFeatures[ndx].sType = isVariablePointersFeatures ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceVariablePointersFeatures[ndx].pNext = &deviceVertexAttributeDivisorFeaturesEXT[ndx];

	deviceVertexAttributeDivisorFeaturesEXT[ndx].sType = isVertexAttributeDivisorFeaturesEXT ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceVertexAttributeDivisorFeaturesEXT[ndx].pNext = &deviceVertexInputDynamicStateFeaturesEXT[ndx];

	deviceVertexInputDynamicStateFeaturesEXT[ndx].sType = isVertexInputDynamicStateFeaturesEXT ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceVertexInputDynamicStateFeaturesEXT[ndx].pNext = &deviceYcbcrImageArraysFeaturesEXT[ndx];

	deviceYcbcrImageArraysFeaturesEXT[ndx].sType = isYcbcrImageArraysFeaturesEXT ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceYcbcrImageArraysFeaturesEXT[ndx].pNext = &deviceYcbcr2Plane444FormatsFeaturesEXT[ndx];

	deviceYcbcr2Plane444FormatsFeaturesEXT[ndx].sType = isYcbcr2Plane444FormatsFeaturesEXT ? VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT : VK_STRUCTURE_TYPE_MAX_ENUM;
	deviceYcbcr2Plane444FormatsFeaturesEXT[ndx].pNext = DE_NULL;

	deMemset(&extFeatures.features, 0xcd, sizeof(extFeatures.features));
	extFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
	extFeatures.pNext = &device4444FormatsFeaturesEXT[ndx];
	vki.getPhysicalDeviceFeatures2(physicalDevice, &extFeatures);
}

if (is4444FormatsFeaturesEXT)
	log << TestLog::Message << device4444FormatsFeaturesEXT[0] << TestLog::EndMessage;
if (is8BitStorageFeatures)
	log << TestLog::Message << device8BitStorageFeatures[0] << TestLog::EndMessage;
if (is16BitStorageFeatures)
	log << TestLog::Message << device16BitStorageFeatures[0] << TestLog::EndMessage;
if (isASTCDecodeFeaturesEXT)
	log << TestLog::Message << deviceASTCDecodeFeaturesEXT[0] << TestLog::EndMessage;
if (isBlendOperationAdvancedFeaturesEXT)
	log << TestLog::Message << deviceBlendOperationAdvancedFeaturesEXT[0] << TestLog::EndMessage;
if (isBufferDeviceAddressFeatures)
	log << TestLog::Message << deviceBufferDeviceAddressFeatures[0] << TestLog::EndMessage;
if (isCustomBorderColorFeaturesEXT)
	log << TestLog::Message << deviceCustomBorderColorFeaturesEXT[0] << TestLog::EndMessage;
if (isColorWriteEnableFeaturesEXT)
	log << TestLog::Message << deviceColorWriteEnableFeaturesEXT[0] << TestLog::EndMessage;
if (isDescriptorIndexingFeatures)
	log << TestLog::Message << deviceDescriptorIndexingFeatures[0] << TestLog::EndMessage;
if (isDepthClipEnableFeaturesEXT)
	log << TestLog::Message << deviceDepthClipEnableFeaturesEXT[0] << TestLog::EndMessage;
if (isExtendedDynamicStateFeaturesEXT)
	log << TestLog::Message << deviceExtendedDynamicStateFeaturesEXT[0] << TestLog::EndMessage;
if (isExtendedDynamicState2FeaturesEXT)
	log << TestLog::Message << deviceExtendedDynamicState2FeaturesEXT[0] << TestLog::EndMessage;
if (isFragmentShadingRateFeaturesKHR)
	log << TestLog::Message << deviceFragmentShadingRateFeaturesKHR[0] << TestLog::EndMessage;
if (isIndexTypeUint8FeaturesEXT)
	log << TestLog::Message << deviceIndexTypeUint8FeaturesEXT[0] << TestLog::EndMessage;
if (isImagelessFramebufferFeatures)
	log << TestLog::Message << deviceImagelessFramebufferFeatures[0] << TestLog::EndMessage;
if (isHostQueryResetFeatures)
	log << TestLog::Message << deviceHostQueryResetFeatures[0] << TestLog::EndMessage;
if (isLineRasterizationFeaturesEXT)
	log << TestLog::Message << deviceLineRasterizationFeaturesEXT[0] << TestLog::EndMessage;
if (isMultiviewFeatures)
	log << TestLog::Message << deviceMultiviewFeatures[0] << TestLog::EndMessage;
if (isPerformanceQueryFeaturesKHR)
	log << TestLog::Message << devicePerformanceQueryFeaturesKHR[0] << TestLog::EndMessage;
if (isProtectedMemoryFeatures)
	log << TestLog::Message << deviceProtectedMemoryFeatures[0] << TestLog::EndMessage;
if (isRobustness2FeaturesEXT)
	log << TestLog::Message << deviceRobustness2FeaturesEXT[0] << TestLog::EndMessage;
if (isSamplerYcbcrConversionFeatures)
	log << TestLog::Message << deviceSamplerYcbcrConversionFeatures[0] << TestLog::EndMessage;
if (isScalarBlockLayoutFeatures)
	log << TestLog::Message << deviceScalarBlockLayoutFeatures[0] << TestLog::EndMessage;
if (isSeparateDepthStencilLayoutsFeatures)
	log << TestLog::Message << deviceSeparateDepthStencilLayoutsFeatures[0] << TestLog::EndMessage;
if (isShaderAtomicInt64Features)
	log << TestLog::Message << deviceShaderAtomicInt64Features[0] << TestLog::EndMessage;
if (isShaderAtomicFloatFeaturesEXT)
	log << TestLog::Message << deviceShaderAtomicFloatFeaturesEXT[0] << TestLog::EndMessage;
if (isShaderFloat16Int8Features)
	log << TestLog::Message << deviceShaderFloat16Int8Features[0] << TestLog::EndMessage;
if (isShaderClockFeaturesKHR)
	log << TestLog::Message << deviceShaderClockFeaturesKHR[0] << TestLog::EndMessage;
if (isShaderDrawParametersFeatures)
	log << TestLog::Message << deviceShaderDrawParametersFeatures[0] << TestLog::EndMessage;
if (isShaderSubgroupExtendedTypesFeatures)
	log << TestLog::Message << deviceShaderSubgroupExtendedTypesFeatures[0] << TestLog::EndMessage;
if (isFragmentShaderInterlockFeaturesEXT)
	log << TestLog::Message << deviceFragmentShaderInterlockFeaturesEXT[0] << TestLog::EndMessage;
if (isTexelBufferAlignmentFeaturesEXT)
	log << TestLog::Message << deviceTexelBufferAlignmentFeaturesEXT[0] << TestLog::EndMessage;
if (isTimelineSemaphoreFeatures)
	log << TestLog::Message << deviceTimelineSemaphoreFeatures[0] << TestLog::EndMessage;
if (isUniformBufferStandardLayoutFeatures)
	log << TestLog::Message << deviceUniformBufferStandardLayoutFeatures[0] << TestLog::EndMessage;
if (isVariablePointersFeatures)
	log << TestLog::Message << deviceVariablePointersFeatures[0] << TestLog::EndMessage;
if (isVertexAttributeDivisorFeaturesEXT)
	log << TestLog::Message << deviceVertexAttributeDivisorFeaturesEXT[0] << TestLog::EndMessage;
if (isVertexInputDynamicStateFeaturesEXT)
	log << TestLog::Message << deviceVertexInputDynamicStateFeaturesEXT[0] << TestLog::EndMessage;
if (isYcbcrImageArraysFeaturesEXT)
	log << TestLog::Message << deviceYcbcrImageArraysFeaturesEXT[0] << TestLog::EndMessage;
if (isYcbcr2Plane444FormatsFeaturesEXT)
	log << TestLog::Message << deviceYcbcr2Plane444FormatsFeaturesEXT[0] << TestLog::EndMessage;

if (is4444FormatsFeaturesEXT &&
	(device4444FormatsFeaturesEXT[0].formatA4R4G4B4 != device4444FormatsFeaturesEXT[1].formatA4R4G4B4 ||
	 device4444FormatsFeaturesEXT[0].formatA4B4G4R4 != device4444FormatsFeaturesEXT[1].formatA4B4G4R4))
{
		TCU_FAIL("Mismatch between VkPhysicalDevice4444FormatsFeaturesEXT");
}
if (is8BitStorageFeatures &&
	(device8BitStorageFeatures[0].storageBuffer8BitAccess != device8BitStorageFeatures[1].storageBuffer8BitAccess ||
	 device8BitStorageFeatures[0].uniformAndStorageBuffer8BitAccess != device8BitStorageFeatures[1].uniformAndStorageBuffer8BitAccess ||
	 device8BitStorageFeatures[0].storagePushConstant8 != device8BitStorageFeatures[1].storagePushConstant8))
{
		TCU_FAIL("Mismatch between VkPhysicalDevice8BitStorageFeatures");
}
if (is16BitStorageFeatures &&
	(device16BitStorageFeatures[0].storageBuffer16BitAccess != device16BitStorageFeatures[1].storageBuffer16BitAccess ||
	 device16BitStorageFeatures[0].uniformAndStorageBuffer16BitAccess != device16BitStorageFeatures[1].uniformAndStorageBuffer16BitAccess ||
	 device16BitStorageFeatures[0].storagePushConstant16 != device16BitStorageFeatures[1].storagePushConstant16 ||
	 device16BitStorageFeatures[0].storageInputOutput16 != device16BitStorageFeatures[1].storageInputOutput16))
{
		TCU_FAIL("Mismatch between VkPhysicalDevice16BitStorageFeatures");
}
if (isASTCDecodeFeaturesEXT &&
	(deviceASTCDecodeFeaturesEXT[0].decodeModeSharedExponent != deviceASTCDecodeFeaturesEXT[1].decodeModeSharedExponent))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceASTCDecodeFeaturesEXT");
}
if (isBlendOperationAdvancedFeaturesEXT &&
	(deviceBlendOperationAdvancedFeaturesEXT[0].advancedBlendCoherentOperations != deviceBlendOperationAdvancedFeaturesEXT[1].advancedBlendCoherentOperations))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT");
}
if (isBufferDeviceAddressFeatures &&
	(deviceBufferDeviceAddressFeatures[0].bufferDeviceAddress != deviceBufferDeviceAddressFeatures[1].bufferDeviceAddress ||
	 deviceBufferDeviceAddressFeatures[0].bufferDeviceAddressCaptureReplay != deviceBufferDeviceAddressFeatures[1].bufferDeviceAddressCaptureReplay ||
	 deviceBufferDeviceAddressFeatures[0].bufferDeviceAddressMultiDevice != deviceBufferDeviceAddressFeatures[1].bufferDeviceAddressMultiDevice))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceBufferDeviceAddressFeatures");
}
if (isCustomBorderColorFeaturesEXT &&
	(deviceCustomBorderColorFeaturesEXT[0].customBorderColors != deviceCustomBorderColorFeaturesEXT[1].customBorderColors ||
	 deviceCustomBorderColorFeaturesEXT[0].customBorderColorWithoutFormat != deviceCustomBorderColorFeaturesEXT[1].customBorderColorWithoutFormat))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceCustomBorderColorFeaturesEXT");
}
if (isColorWriteEnableFeaturesEXT &&
	(deviceColorWriteEnableFeaturesEXT[0].colorWriteEnable != deviceColorWriteEnableFeaturesEXT[1].colorWriteEnable))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceColorWriteEnableFeaturesEXT");
}
if (isDescriptorIndexingFeatures &&
	(deviceDescriptorIndexingFeatures[0].shaderInputAttachmentArrayDynamicIndexing != deviceDescriptorIndexingFeatures[1].shaderInputAttachmentArrayDynamicIndexing ||
	 deviceDescriptorIndexingFeatures[0].shaderUniformTexelBufferArrayDynamicIndexing != deviceDescriptorIndexingFeatures[1].shaderUniformTexelBufferArrayDynamicIndexing ||
	 deviceDescriptorIndexingFeatures[0].shaderStorageTexelBufferArrayDynamicIndexing != deviceDescriptorIndexingFeatures[1].shaderStorageTexelBufferArrayDynamicIndexing ||
	 deviceDescriptorIndexingFeatures[0].shaderUniformBufferArrayNonUniformIndexing != deviceDescriptorIndexingFeatures[1].shaderUniformBufferArrayNonUniformIndexing ||
	 deviceDescriptorIndexingFeatures[0].shaderSampledImageArrayNonUniformIndexing != deviceDescriptorIndexingFeatures[1].shaderSampledImageArrayNonUniformIndexing ||
	 deviceDescriptorIndexingFeatures[0].shaderStorageBufferArrayNonUniformIndexing != deviceDescriptorIndexingFeatures[1].shaderStorageBufferArrayNonUniformIndexing ||
	 deviceDescriptorIndexingFeatures[0].shaderStorageImageArrayNonUniformIndexing != deviceDescriptorIndexingFeatures[1].shaderStorageImageArrayNonUniformIndexing ||
	 deviceDescriptorIndexingFeatures[0].shaderInputAttachmentArrayNonUniformIndexing != deviceDescriptorIndexingFeatures[1].shaderInputAttachmentArrayNonUniformIndexing ||
	 deviceDescriptorIndexingFeatures[0].shaderUniformTexelBufferArrayNonUniformIndexing != deviceDescriptorIndexingFeatures[1].shaderUniformTexelBufferArrayNonUniformIndexing ||
	 deviceDescriptorIndexingFeatures[0].shaderStorageTexelBufferArrayNonUniformIndexing != deviceDescriptorIndexingFeatures[1].shaderStorageTexelBufferArrayNonUniformIndexing ||
	 deviceDescriptorIndexingFeatures[0].descriptorBindingUniformBufferUpdateAfterBind != deviceDescriptorIndexingFeatures[1].descriptorBindingUniformBufferUpdateAfterBind ||
	 deviceDescriptorIndexingFeatures[0].descriptorBindingSampledImageUpdateAfterBind != deviceDescriptorIndexingFeatures[1].descriptorBindingSampledImageUpdateAfterBind ||
	 deviceDescriptorIndexingFeatures[0].descriptorBindingStorageImageUpdateAfterBind != deviceDescriptorIndexingFeatures[1].descriptorBindingStorageImageUpdateAfterBind ||
	 deviceDescriptorIndexingFeatures[0].descriptorBindingStorageBufferUpdateAfterBind != deviceDescriptorIndexingFeatures[1].descriptorBindingStorageBufferUpdateAfterBind ||
	 deviceDescriptorIndexingFeatures[0].descriptorBindingUniformTexelBufferUpdateAfterBind != deviceDescriptorIndexingFeatures[1].descriptorBindingUniformTexelBufferUpdateAfterBind ||
	 deviceDescriptorIndexingFeatures[0].descriptorBindingStorageTexelBufferUpdateAfterBind != deviceDescriptorIndexingFeatures[1].descriptorBindingStorageTexelBufferUpdateAfterBind ||
	 deviceDescriptorIndexingFeatures[0].descriptorBindingUpdateUnusedWhilePending != deviceDescriptorIndexingFeatures[1].descriptorBindingUpdateUnusedWhilePending ||
	 deviceDescriptorIndexingFeatures[0].descriptorBindingPartiallyBound != deviceDescriptorIndexingFeatures[1].descriptorBindingPartiallyBound ||
	 deviceDescriptorIndexingFeatures[0].descriptorBindingVariableDescriptorCount != deviceDescriptorIndexingFeatures[1].descriptorBindingVariableDescriptorCount ||
	 deviceDescriptorIndexingFeatures[0].runtimeDescriptorArray != deviceDescriptorIndexingFeatures[1].runtimeDescriptorArray))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceDescriptorIndexingFeatures");
}
if (isDepthClipEnableFeaturesEXT &&
	(deviceDepthClipEnableFeaturesEXT[0].depthClipEnable != deviceDepthClipEnableFeaturesEXT[1].depthClipEnable))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceDepthClipEnableFeaturesEXT");
}
if (isExtendedDynamicStateFeaturesEXT &&
	(deviceExtendedDynamicStateFeaturesEXT[0].extendedDynamicState != deviceExtendedDynamicStateFeaturesEXT[1].extendedDynamicState))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceExtendedDynamicStateFeaturesEXT");
}
if (isExtendedDynamicState2FeaturesEXT &&
	(deviceExtendedDynamicState2FeaturesEXT[0].extendedDynamicState2 != deviceExtendedDynamicState2FeaturesEXT[1].extendedDynamicState2 ||
	 deviceExtendedDynamicState2FeaturesEXT[0].extendedDynamicState2LogicOp != deviceExtendedDynamicState2FeaturesEXT[1].extendedDynamicState2LogicOp ||
	 deviceExtendedDynamicState2FeaturesEXT[0].extendedDynamicState2PatchControlPoints != deviceExtendedDynamicState2FeaturesEXT[1].extendedDynamicState2PatchControlPoints))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceExtendedDynamicState2FeaturesEXT");
}
if (isFragmentShadingRateFeaturesKHR &&
	(deviceFragmentShadingRateFeaturesKHR[0].pipelineFragmentShadingRate != deviceFragmentShadingRateFeaturesKHR[1].pipelineFragmentShadingRate ||
	 deviceFragmentShadingRateFeaturesKHR[0].primitiveFragmentShadingRate != deviceFragmentShadingRateFeaturesKHR[1].primitiveFragmentShadingRate ||
	 deviceFragmentShadingRateFeaturesKHR[0].attachmentFragmentShadingRate != deviceFragmentShadingRateFeaturesKHR[1].attachmentFragmentShadingRate))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceFragmentShadingRateFeaturesKHR");
}
if (isIndexTypeUint8FeaturesEXT &&
	(deviceIndexTypeUint8FeaturesEXT[0].indexTypeUint8 != deviceIndexTypeUint8FeaturesEXT[1].indexTypeUint8))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceIndexTypeUint8FeaturesEXT");
}
if (isImagelessFramebufferFeatures &&
	(deviceImagelessFramebufferFeatures[0].imagelessFramebuffer != deviceImagelessFramebufferFeatures[1].imagelessFramebuffer))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceImagelessFramebufferFeatures");
}
if (isHostQueryResetFeatures &&
	(deviceHostQueryResetFeatures[0].hostQueryReset != deviceHostQueryResetFeatures[1].hostQueryReset))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceHostQueryResetFeatures");
}
if (isLineRasterizationFeaturesEXT &&
	(deviceLineRasterizationFeaturesEXT[0].rectangularLines != deviceLineRasterizationFeaturesEXT[1].rectangularLines ||
	 deviceLineRasterizationFeaturesEXT[0].bresenhamLines != deviceLineRasterizationFeaturesEXT[1].bresenhamLines ||
	 deviceLineRasterizationFeaturesEXT[0].smoothLines != deviceLineRasterizationFeaturesEXT[1].smoothLines ||
	 deviceLineRasterizationFeaturesEXT[0].stippledRectangularLines != deviceLineRasterizationFeaturesEXT[1].stippledRectangularLines ||
	 deviceLineRasterizationFeaturesEXT[0].stippledBresenhamLines != deviceLineRasterizationFeaturesEXT[1].stippledBresenhamLines ||
	 deviceLineRasterizationFeaturesEXT[0].stippledSmoothLines != deviceLineRasterizationFeaturesEXT[1].stippledSmoothLines))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceLineRasterizationFeaturesEXT");
}
if (isMultiviewFeatures &&
	(deviceMultiviewFeatures[0].multiview != deviceMultiviewFeatures[1].multiview ||
	 deviceMultiviewFeatures[0].multiviewGeometryShader != deviceMultiviewFeatures[1].multiviewGeometryShader ||
	 deviceMultiviewFeatures[0].multiviewTessellationShader != deviceMultiviewFeatures[1].multiviewTessellationShader))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceMultiviewFeatures");
}
if (isPerformanceQueryFeaturesKHR &&
	(devicePerformanceQueryFeaturesKHR[0].performanceCounterQueryPools != devicePerformanceQueryFeaturesKHR[1].performanceCounterQueryPools ||
	 devicePerformanceQueryFeaturesKHR[0].performanceCounterMultipleQueryPools != devicePerformanceQueryFeaturesKHR[1].performanceCounterMultipleQueryPools))
{
		TCU_FAIL("Mismatch between VkPhysicalDevicePerformanceQueryFeaturesKHR");
}
if (isProtectedMemoryFeatures &&
	(deviceProtectedMemoryFeatures[0].protectedMemory != deviceProtectedMemoryFeatures[1].protectedMemory))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceProtectedMemoryFeatures");
}
if (isRobustness2FeaturesEXT &&
	(deviceRobustness2FeaturesEXT[0].robustBufferAccess2 != deviceRobustness2FeaturesEXT[1].robustBufferAccess2 ||
	 deviceRobustness2FeaturesEXT[0].robustImageAccess2 != deviceRobustness2FeaturesEXT[1].robustImageAccess2 ||
	 deviceRobustness2FeaturesEXT[0].nullDescriptor != deviceRobustness2FeaturesEXT[1].nullDescriptor))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceRobustness2FeaturesEXT");
}
if (isSamplerYcbcrConversionFeatures &&
	(deviceSamplerYcbcrConversionFeatures[0].samplerYcbcrConversion != deviceSamplerYcbcrConversionFeatures[1].samplerYcbcrConversion))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceSamplerYcbcrConversionFeatures");
}
if (isScalarBlockLayoutFeatures &&
	(deviceScalarBlockLayoutFeatures[0].scalarBlockLayout != deviceScalarBlockLayoutFeatures[1].scalarBlockLayout))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceScalarBlockLayoutFeatures");
}
if (isSeparateDepthStencilLayoutsFeatures &&
	(deviceSeparateDepthStencilLayoutsFeatures[0].separateDepthStencilLayouts != deviceSeparateDepthStencilLayoutsFeatures[1].separateDepthStencilLayouts))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures");
}
if (isShaderAtomicInt64Features &&
	(deviceShaderAtomicInt64Features[0].shaderBufferInt64Atomics != deviceShaderAtomicInt64Features[1].shaderBufferInt64Atomics ||
	 deviceShaderAtomicInt64Features[0].shaderSharedInt64Atomics != deviceShaderAtomicInt64Features[1].shaderSharedInt64Atomics))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceShaderAtomicInt64Features");
}
if (isShaderAtomicFloatFeaturesEXT &&
	(deviceShaderAtomicFloatFeaturesEXT[0].shaderBufferFloat32Atomics != deviceShaderAtomicFloatFeaturesEXT[1].shaderBufferFloat32Atomics ||
	 deviceShaderAtomicFloatFeaturesEXT[0].shaderBufferFloat32AtomicAdd != deviceShaderAtomicFloatFeaturesEXT[1].shaderBufferFloat32AtomicAdd ||
	 deviceShaderAtomicFloatFeaturesEXT[0].shaderBufferFloat64Atomics != deviceShaderAtomicFloatFeaturesEXT[1].shaderBufferFloat64Atomics ||
	 deviceShaderAtomicFloatFeaturesEXT[0].shaderBufferFloat64AtomicAdd != deviceShaderAtomicFloatFeaturesEXT[1].shaderBufferFloat64AtomicAdd ||
	 deviceShaderAtomicFloatFeaturesEXT[0].shaderSharedFloat32Atomics != deviceShaderAtomicFloatFeaturesEXT[1].shaderSharedFloat32Atomics ||
	 deviceShaderAtomicFloatFeaturesEXT[0].shaderSharedFloat32AtomicAdd != deviceShaderAtomicFloatFeaturesEXT[1].shaderSharedFloat32AtomicAdd ||
	 deviceShaderAtomicFloatFeaturesEXT[0].shaderSharedFloat64Atomics != deviceShaderAtomicFloatFeaturesEXT[1].shaderSharedFloat64Atomics ||
	 deviceShaderAtomicFloatFeaturesEXT[0].shaderSharedFloat64AtomicAdd != deviceShaderAtomicFloatFeaturesEXT[1].shaderSharedFloat64AtomicAdd ||
	 deviceShaderAtomicFloatFeaturesEXT[0].shaderImageFloat32Atomics != deviceShaderAtomicFloatFeaturesEXT[1].shaderImageFloat32Atomics ||
	 deviceShaderAtomicFloatFeaturesEXT[0].shaderImageFloat32AtomicAdd != deviceShaderAtomicFloatFeaturesEXT[1].shaderImageFloat32AtomicAdd ||
	 deviceShaderAtomicFloatFeaturesEXT[0].sparseImageFloat32Atomics != deviceShaderAtomicFloatFeaturesEXT[1].sparseImageFloat32Atomics ||
	 deviceShaderAtomicFloatFeaturesEXT[0].sparseImageFloat32AtomicAdd != deviceShaderAtomicFloatFeaturesEXT[1].sparseImageFloat32AtomicAdd))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceShaderAtomicFloatFeaturesEXT");
}
if (isShaderFloat16Int8Features &&
	(deviceShaderFloat16Int8Features[0].shaderFloat16 != deviceShaderFloat16Int8Features[1].shaderFloat16 ||
	 deviceShaderFloat16Int8Features[0].shaderInt8 != deviceShaderFloat16Int8Features[1].shaderInt8))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceShaderFloat16Int8Features");
}
if (isShaderClockFeaturesKHR &&
	(deviceShaderClockFeaturesKHR[0].shaderSubgroupClock != deviceShaderClockFeaturesKHR[1].shaderSubgroupClock ||
	 deviceShaderClockFeaturesKHR[0].shaderDeviceClock != deviceShaderClockFeaturesKHR[1].shaderDeviceClock))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceShaderClockFeaturesKHR");
}
if (isShaderDrawParametersFeatures &&
	(deviceShaderDrawParametersFeatures[0].shaderDrawParameters != deviceShaderDrawParametersFeatures[1].shaderDrawParameters))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceShaderDrawParametersFeatures");
}
if (isShaderSubgroupExtendedTypesFeatures &&
	(deviceShaderSubgroupExtendedTypesFeatures[0].shaderSubgroupExtendedTypes != deviceShaderSubgroupExtendedTypesFeatures[1].shaderSubgroupExtendedTypes))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures");
}
if (isFragmentShaderInterlockFeaturesEXT &&
	(deviceFragmentShaderInterlockFeaturesEXT[0].fragmentShaderSampleInterlock != deviceFragmentShaderInterlockFeaturesEXT[1].fragmentShaderSampleInterlock ||
	 deviceFragmentShaderInterlockFeaturesEXT[0].fragmentShaderPixelInterlock != deviceFragmentShaderInterlockFeaturesEXT[1].fragmentShaderPixelInterlock ||
	 deviceFragmentShaderInterlockFeaturesEXT[0].fragmentShaderShadingRateInterlock != deviceFragmentShaderInterlockFeaturesEXT[1].fragmentShaderShadingRateInterlock))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT");
}
if (isTexelBufferAlignmentFeaturesEXT &&
	(deviceTexelBufferAlignmentFeaturesEXT[0].texelBufferAlignment != deviceTexelBufferAlignmentFeaturesEXT[1].texelBufferAlignment))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT");
}
if (isTimelineSemaphoreFeatures &&
	(deviceTimelineSemaphoreFeatures[0].timelineSemaphore != deviceTimelineSemaphoreFeatures[1].timelineSemaphore))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceTimelineSemaphoreFeatures");
}
if (isUniformBufferStandardLayoutFeatures &&
	(deviceUniformBufferStandardLayoutFeatures[0].uniformBufferStandardLayout != deviceUniformBufferStandardLayoutFeatures[1].uniformBufferStandardLayout))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceUniformBufferStandardLayoutFeatures");
}
if (isVariablePointersFeatures &&
	(deviceVariablePointersFeatures[0].variablePointersStorageBuffer != deviceVariablePointersFeatures[1].variablePointersStorageBuffer ||
	 deviceVariablePointersFeatures[0].variablePointers != deviceVariablePointersFeatures[1].variablePointers))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceVariablePointersFeatures");
}
if (isVertexAttributeDivisorFeaturesEXT &&
	(deviceVertexAttributeDivisorFeaturesEXT[0].vertexAttributeInstanceRateDivisor != deviceVertexAttributeDivisorFeaturesEXT[1].vertexAttributeInstanceRateDivisor ||
	 deviceVertexAttributeDivisorFeaturesEXT[0].vertexAttributeInstanceRateZeroDivisor != deviceVertexAttributeDivisorFeaturesEXT[1].vertexAttributeInstanceRateZeroDivisor))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT");
}
if (isVertexInputDynamicStateFeaturesEXT &&
	(deviceVertexInputDynamicStateFeaturesEXT[0].vertexInputDynamicState != deviceVertexInputDynamicStateFeaturesEXT[1].vertexInputDynamicState))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT");
}
if (isYcbcrImageArraysFeaturesEXT &&
	(deviceYcbcrImageArraysFeaturesEXT[0].ycbcrImageArrays != deviceYcbcrImageArraysFeaturesEXT[1].ycbcrImageArrays))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceYcbcrImageArraysFeaturesEXT");
}
if (isYcbcr2Plane444FormatsFeaturesEXT &&
	(deviceYcbcr2Plane444FormatsFeaturesEXT[0].ycbcr2plane444Formats != deviceYcbcr2Plane444FormatsFeaturesEXT[1].ycbcr2plane444Formats))
{
		TCU_FAIL("Mismatch between VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT");
}

/* WARNING: This is auto-generated file. Do not modify, since changes will
 * be lost! Modify the generating script instead.
 */
template<> VkObjectType	getObjectType<VkInstanceT>				(void) { return VK_OBJECT_TYPE_INSTANCE;				}
template<> VkObjectType	getObjectType<VkPhysicalDeviceT>		(void) { return VK_OBJECT_TYPE_PHYSICAL_DEVICE;			}
template<> VkObjectType	getObjectType<VkDeviceT>				(void) { return VK_OBJECT_TYPE_DEVICE;					}
template<> VkObjectType	getObjectType<VkQueueT>					(void) { return VK_OBJECT_TYPE_QUEUE;					}
template<> VkObjectType	getObjectType<VkCmdBufferT>				(void) { return VK_OBJECT_TYPE_COMMAND_BUFFER;			}
template<> VkObjectType	getObjectType<VkDeviceMemoryT>			(void) { return VK_OBJECT_TYPE_DEVICE_MEMORY;			}
template<> VkObjectType	getObjectType<VkBufferT>				(void) { return VK_OBJECT_TYPE_BUFFER;					}
template<> VkObjectType	getObjectType<VkBufferViewT>			(void) { return VK_OBJECT_TYPE_BUFFER_VIEW;				}
template<> VkObjectType	getObjectType<VkImageT>					(void) { return VK_OBJECT_TYPE_IMAGE;					}
template<> VkObjectType	getObjectType<VkImageViewT>				(void) { return VK_OBJECT_TYPE_IMAGE_VIEW;				}
template<> VkObjectType	getObjectType<VkColorAttachmentViewT>	(void) { return VK_OBJECT_TYPE_COLOR_ATTACHMENT_VIEW;	}
template<> VkObjectType	getObjectType<VkDepthStencilViewT>		(void) { return VK_OBJECT_TYPE_DEPTH_STENCIL_VIEW;		}
template<> VkObjectType	getObjectType<VkShaderT>				(void) { return VK_OBJECT_TYPE_SHADER;					}
template<> VkObjectType	getObjectType<VkPipelineT>				(void) { return VK_OBJECT_TYPE_PIPELINE;				}
template<> VkObjectType	getObjectType<VkPipelineLayoutT>		(void) { return VK_OBJECT_TYPE_PIPELINE_LAYOUT;			}
template<> VkObjectType	getObjectType<VkSamplerT>				(void) { return VK_OBJECT_TYPE_SAMPLER;					}
template<> VkObjectType	getObjectType<VkDescriptorSetT>			(void) { return VK_OBJECT_TYPE_DESCRIPTOR_SET;			}
template<> VkObjectType	getObjectType<VkDescriptorSetLayoutT>	(void) { return VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT;	}
template<> VkObjectType	getObjectType<VkDescriptorPoolT>		(void) { return VK_OBJECT_TYPE_DESCRIPTOR_POOL;			}
template<> VkObjectType	getObjectType<VkDynamicVpStateT>		(void) { return VK_OBJECT_TYPE_DYNAMIC_VP_STATE;		}
template<> VkObjectType	getObjectType<VkDynamicRsStateT>		(void) { return VK_OBJECT_TYPE_DYNAMIC_RS_STATE;		}
template<> VkObjectType	getObjectType<VkDynamicCbStateT>		(void) { return VK_OBJECT_TYPE_DYNAMIC_CB_STATE;		}
template<> VkObjectType	getObjectType<VkDynamicDsStateT>		(void) { return VK_OBJECT_TYPE_DYNAMIC_DS_STATE;		}
template<> VkObjectType	getObjectType<VkFenceT>					(void) { return VK_OBJECT_TYPE_FENCE;					}
template<> VkObjectType	getObjectType<VkSemaphoreT>				(void) { return VK_OBJECT_TYPE_SEMAPHORE;				}
template<> VkObjectType	getObjectType<VkEventT>					(void) { return VK_OBJECT_TYPE_EVENT;					}
template<> VkObjectType	getObjectType<VkQueryPoolT>				(void) { return VK_OBJECT_TYPE_QUERY_POOL;				}
template<> VkObjectType	getObjectType<VkFramebufferT>			(void) { return VK_OBJECT_TYPE_FRAMEBUFFER;				}
template<> VkObjectType	getObjectType<VkRenderPassT>			(void) { return VK_OBJECT_TYPE_RENDER_PASS;				}
